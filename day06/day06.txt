可迭代对象
    str
    range(返回的对象)
    list(列表)
range(开始整数，结束整数，步长)
列表：
    list[1,2,3,4,5,6,7,8,9,10]=list[range(10)]
    
    列表是可变的，但是id不变。
    l = [1,2]
    l += [3,4]
    前后 l 的　id 是不变的。

    字符是不可变的，改变字符id会变。
    l = "12"
    l += "34"
    前后　l 的 id 是变化的。  

day06
列表的比较运算：
    运算符：
        < <= > >= == !=
    说明：
        列表的比较规则与字符串的比较规则相同
        列表要求每两个元素能依次进行比较，佛则会出现类型错误。
    示例:

列表的in和not in运算符
    判断一个值是否存在于列表中，如果存在则返回True,否则返回False
    同字符的in运算符类似
列表的索引操作：
    索引取值的语法：
        x = 列表[整数表达式]
    用法：
        等同于字符串的索引（同样分正向反向）
    索引赋值：
        列表是可变的序列，可以通过索引赋值改变列表中的元素。
    语法：
        列表[整数表达式]＝表达式
    示例：
        x[2]=1+2.14   =>改变了第三个元素(等号右边的可以是表达式)(注意：id不变)

    切片取值：
        列表[起始：结束：步长]
    切片赋值：
        作用：
            可以改变原列表的排列，可以插入和修改数据。
        语法：
            列表[切片]　＝　可迭代对象
        说明：
            切片赋值的赋值运算符(=)的右侧必须是一个可迭代对象
        示例：
            L = [2,3,4]
            L = [0:1]
    切片赋值的注意事项：
        对于步长不等于１的切片赋值，赋值运算符的右侧的可迭代对象提供的元素的个数，一定要等于切片切出的段数。

python3中常用于序列的长度：
    len(x) 返回序列的长度
    max(x) 返回序列的最大值元素
    min(x) 返回序列中最小值元素
    sum(x) 返回序列中所有元素的和(元素必须是数字类型)
    any(x) 真值测试。如果列表中的一个值为真值则返回True
    all(x) 真值测试。如果列表中所有的值为真值则返回True
python3中常用的列表方法：
    list.py
深拷贝　deep coopy  / 浅拷贝　shallow coopy

浅拷贝：
    在复制时只会复制一层对量，不会复制深层变量绑定的对象的复制过程。
    如：
        L=[8,9]
        L1=[1,2,3,L]
        L2=copy(L1)
        print(L1)
        print(L2)
深拷贝：
    在复制时复制了里面的数字，不再是一起绑定了一个数。
    示例：
        import coopy
        L=[8,9]
        L1=[1,2,3,L]
        L2=copy.deepcopy(L1)
        print(L1)
        print(L2)
        print()
    
列表和字符串的比较：
    １、列表和字符串都是序列，元素之间又先后顺序关系。
    ２、列表和字符串有相同的操作：+ += * *= < > in
    ３、字符串是不可变化的序列，列表是可变的序列
    ４、字符串的每一个元素只能存储字符，而列表可以存储任意类型的元素
    ５、列表和字符串都是可迭代对象

字符串的文本解析方法 split 和 join
    S.split(sep=None) 将字符串使用spe作用分隔符分割字符，返回分割后的字符串列表；当不给定参数时，用空白字符作为分隔符。
            （看括号里面是啥，字符串里面有的话就用它来分割）
    S.join(iterable) 用可迭代对象中的字符串生成一个中间用Ｓ进行分隔的字符串
    示例：
    s = 'A B C'
        L = s.split()          #L=['A','B','C']
        L = s.split(" ")       #L=['A','B','C'] 
        L = s.split("-")       #L=
        L = s.split("*")

        L = "".join(s)
        L = " ".join(s)
        L = "-".join(s)
        L = "*".join(s)
列表推导式：list comprehesion
    列表推导式使用可迭代对象创建列表的表达式
作用：
    创建列表
语法：
    




